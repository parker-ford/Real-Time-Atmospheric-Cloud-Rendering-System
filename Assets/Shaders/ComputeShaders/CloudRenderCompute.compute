#pragma kernel CSMain

#include "UnityCG.cginc"
#include "../Includes/noise.cginc"
#include "../Includes/raycast.cginc"

#define SCALE_TO_EARTH_RADIUS 1

SamplerState point_repeat_sampler;
SamplerState linear_repeat_sampler;
SamplerState linear_clamp_sampler;

Texture2D _CloudMap;
Texture2D _CloudHeightGradient;
Texture2D _CloudTypeMap;
Texture2D _SingleCloudHeightGradient;
Texture3D _BillowyNoise;
Texture3D _WispyNoise;

float3 _LightDir;
float3 _AmbientColor;
float3 _LightColor;
float3 _WindDirection;

float2 _CloudMapOffset;

int _DebugLighting;//
int _DebugDensity;
int _DebugType;
int _BufferWidth, _BufferHeight;
float _AtmosphereLow, _AtmosphereHigh;
float _AbsorptionCoefficient, _ScatteringCoefficient;
float _CloudMapTiling, _BillowyNoiseTiling, _WispyNoiseTiling;
float _CloudDensity;
float _PhaseWeight;
float _HGAsymmetry;
float _DraineAsymmetry;
float _DraineAlpha;
float _LightIntensity;
float _LightStepSize;
float _AmbientStrength;
float _MultipleScatteringStrength;
float _GlobalCloudType;
float _CloudTypeMapTiling;
float _FogDensity, _FogOffset;
float _CloudCoverage;
float _CloudTypeModifier;
float _NoiseStrength;
float _WindSpeed;
float _MultipleScatteringAttenuation;
float _MultipleScatteringContribution;
float _MultipleScatteringEccentricity;
int _MultipleScatteringOctaves;
float _StepSize;
float _WindStretchFactor;
int _LightMarchSteps;
int _PhaseFunction;

RWTexture2D<float> _CloudMask;
RWTexture2D<float4> _CloudTex;
RWTexture2D<float> _CloudDepth;


float calculateHeightGradient(float a, float b, float c, float height){
    float val = 0;
    val = remap_f(height, 0.0, a, 0.0, 1.0);
    val *= remap_f(height, b, c, 1.0, 0.0);
    return val;
}

float beers(float tau){
    float beers = exp(tau);
    return beers;
}

float henyeyGreenstein(float g, float cosTheta) {
    float gg = g * g;
    return (1.0 / (4.0 * PI))  * ((1.0 - gg) / pow(1.0 + gg - 2.0 * g * cosTheta, 1.5));
}

float draine(float u, float g, float a)
{
    return ((1 - g*g)*(1 + a*u*u))/(4.*(1 + (a*(1 + 2*g*g))/3.) * PI * pow(1 + g*g - 2*g*u,1.5));
}


float doubleHenyeyGreenstein(float g, float cosTheta) {
    return lerp(henyeyGreenstein(-g, cosTheta), henyeyGreenstein(g, cosTheta), _PhaseWeight); 
}

float draineHG(float g_HG, float g_D, float a, float w, float cosTheta){
    return lerp(draine(cosTheta, g_D, a), henyeyGreenstein(g_HG, cosTheta), _PhaseWeight);

}

float phase(float g_HG, float g_D, float a, float w, float cosTheta){
    if(_PhaseFunction == 0){
        return henyeyGreenstein(0, cosTheta);
    }
    else if(_PhaseFunction == 1){
        return draineHG(g_HG, g_D, a, w, cosTheta);
    }
    
    return 0.0;
}

float getHeightFract(float3 p){
    if(SCALE_TO_EARTH_RADIUS == 1) p.y -= EARTH_RADIUS;
    float res = (p.y - _AtmosphereLow) / (_AtmosphereHigh - _AtmosphereLow);
    return min(res, 1.0);
}

float sampleCloudMap(float4 pos){
    float2 windEffect = _WindDirection * _WindStretchFactor;
    float2 texCoords = (pos.xz + _CloudMapOffset + windEffect) / _CloudMapTiling;
    texCoords /= 1.0 + windEffect;
    float cloudSample =  _CloudMap.SampleLevel(linear_repeat_sampler, texCoords, pos.w).r;

    if(_CloudCoverage >= 0.0){
        cloudSample = lerp(cloudSample, 1.0, _CloudCoverage);
    }
    else{
        cloudSample = lerp(cloudSample, 0.0, abs(_CloudCoverage));
    }
    return cloudSample;

}

float sampleHeightGradient(float4 pos, float cloudMap){
    float cloudHeight = getHeightFract(pos);
    if(_DebugType == 0){
        float cloudType = remap_f(cloudMap, 0.0, 1.0, 0, _GlobalCloudType);
        return _CloudHeightGradient.SampleLevel(linear_clamp_sampler, float2(cloudType, cloudHeight), 0).r;
    }
    else if(_DebugType == 1){
        float4 cloudTypeSample = _CloudTypeMap.SampleLevel(linear_repeat_sampler, pos.xz / _CloudTypeMapTiling, pos.w);
        float cloudType = remap_f(cloudMap, 0.0, 1.0, 0, _GlobalCloudType); 
        float cloudModifier = cloudTypeSample.r * _CloudTypeModifier;
        cloudType += pow(cloudModifier, 0.75);
        cloudType = clamp(cloudType, 0.005, 0.995);
        cloudHeight = clamp(cloudHeight, 0.005, 0.995);
        return _CloudHeightGradient.SampleLevel(linear_repeat_sampler, float2(cloudType, cloudHeight), 0).r; 
    }

    return 0.0;
}

float calculateDimensionalProfile(float4 pos){
    float cloudMap = sampleCloudMap(pos);
    float heightGradient = sampleHeightGradient(pos, cloudMap);
    return cloudMap * heightGradient * _CloudDensity;
}

float getBaseCloud(float4 pos, float dimensionalProfile){
    pos.xyz -= _WindDirection * smoothstep(0.0, 1.0, getHeightFract(pos)) * _WindSpeed * -1.0;

    //Sample Noise Textures
    float4 lowFreqBillowyNoiseSample = _BillowyNoise.SampleLevel(linear_repeat_sampler, pos.xyz / _BillowyNoiseTiling, pos.w);
    float4 highFreqBillowyNoiseSample = _BillowyNoise.SampleLevel(linear_repeat_sampler, pos / (_BillowyNoiseTiling / 2.0), pos.w);
    float4 wispyNoiseSample = _WispyNoise.SampleLevel(linear_repeat_sampler, pos.xyz / _WispyNoiseTiling, pos.w);

    //Combine Noise Channels
    float lowFreqBillowyFBM = (lowFreqBillowyNoiseSample.b * 0.625) + (lowFreqBillowyNoiseSample.g * 0.25) + (lowFreqBillowyNoiseSample.a * 0.125);
    float highFreqBillowyFBM = (highFreqBillowyNoiseSample.r * 0.625) + (highFreqBillowyNoiseSample.g * 0.25) + (highFreqBillowyNoiseSample.b * 0.125);
    float billowyNoise = lowFreqBillowyFBM * 0.60f + highFreqBillowyFBM * 0.40f;
    float wispyNoise = (wispyNoiseSample.b * 0.625) + (wispyNoiseSample.g * 0.25) + (wispyNoiseSample.r * 0.125);

    //Transition between noise types
    float transition = remap_f(getHeightFract(pos.xyz), 0.0, 0.3, 0.0, 0.75);
    float noise =  lerp(wispyNoise, billowyNoise, saturate(transition));

    return noise;
}

float calculateDensity(float4 pos, float dimensionalProfile){
    float noise = getBaseCloud(pos, dimensionalProfile);
    float density = saturate(saturate(noise) - (1.0 - (dimensionalProfile)));
    return _DebugDensity == 1 ? density : dimensionalProfile;
}

float3 multipleScattering(float tau, float cosTheta) {
    float a = _MultipleScatteringAttenuation;
    float b = _MultipleScatteringContribution;
    float c = _MultipleScatteringEccentricity;

    float luminance = 0.0;
    for(int i = 0; i < _MultipleScatteringOctaves; i++){
        luminance = luminance + (_ScatteringCoefficient) * pow(b, i) * phase(pow(c, i) * _HGAsymmetry, pow(c, i) * _DraineAsymmetry, _DraineAlpha, _PhaseWeight, cosTheta) * beers(-tau * (_AbsorptionCoefficient + _ScatteringCoefficient) * pow(a, i) * _LightStepSize);
    }

    return luminance;
}

float3 calculateLightEnergy(float3 pos, float cosTheta){
    float tau = 0.0;
    float totalDistance = 0.0;
    float frameSegment = (float)(_Frame % _NumSuperSamples) / (float)_NumSuperSamples;
    for(int l = 0; l < _LightMarchSteps; l++){
        float lightT = _LightStepSize * (l + 0.5);
        float4 lightPos = 0;
        lightPos.xyz = pos + _LightDir * totalDistance + _LightDir * (frameSegment * _LightStepSize) + _LightDir * (_LightStepSize / (float)_NumSuperSamples) * 0.5;
        lightPos.w = 0;
        float dimensionalProfile = calculateDimensionalProfile(lightPos);
        float density = calculateDensity(lightPos, dimensionalProfile);
        tau += density;
        totalDistance += _LightStepSize;
    }

    return multipleScattering(tau, cosTheta);
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    float maxDist = 50000;

    float2 uv = float2((id.xy) / float2(_BufferWidth, _BufferHeight));
    float4 blueNoiseSample = sampleBlueNoiseCompute(uv * float2(_BufferWidth / 256.0, _BufferHeight / 256.0), point_repeat_sampler);

    float2 pixelOffset = blueNoiseSample.rg;
    float distanceOffset = blueNoiseSample.b;
    
    Ray ray = getRayFromUV(uv, pixelOffset, SCALE_TO_EARTH_RADIUS);
    Sphere lowerAtmosphere = {float3(0, 0, 0), SCALE_TO_EARTH_RADIUS == 1 ? EARTH_RADIUS + _AtmosphereLow : _AtmosphereLow};
    Sphere upperAtmosphere = {float3(0, 0, 0), SCALE_TO_EARTH_RADIUS == 1 ? EARTH_RADIUS + _AtmosphereHigh : _AtmosphereHigh};


    SphereHit lowerAtmosphereHit = raySphereIntersect(ray, lowerAtmosphere);
    SphereHit upperAtmosphereHit = raySphereIntersect(ray, upperAtmosphere);

    float3 scattering = float3(0, 0, 0);
    float transparency = 1;
    int depthSaved = 0;

    _CloudDepth[id.xy] = 1.0;

    if(lowerAtmosphereHit.hit && lowerAtmosphereHit.exit < maxDist)
    {

        if(_DebugDensity == 2){
            //Return cloud map
            float4 p;
            p.xyz = ray.origin + ray.direction * lowerAtmosphereHit.exit;
            p.w = remap_f(length(p.xyz - ray.origin), 0.0, maxDist, 0.0, 8.0);
            float cloudMap = sampleCloudMap(p);
            _CloudTex[id.xy] = float4(cloudMap, cloudMap, cloudMap, 1.0);
            _CloudMask[id.xy] = 0.0;
            _CloudDepth[id.xy] = 0.0;
            return;
        }
        if(_DebugDensity == 3){
            //Return cloud type map
            float cloudType = _CloudTypeMap.SampleLevel(linear_repeat_sampler, (ray.origin + ray.direction * lowerAtmosphereHit.exit).xz / _CloudTypeMapTiling, 0).r;
            _CloudTex[id.xy] = float4(cloudType, cloudType, cloudType, 1.0);
            _CloudMask[id.xy] = 0.0;
            _CloudDepth[id.xy] = 0.0;
            return;
        }


        float stepSize = _StepSize;

        float frameSegment = (float)(_Frame % _NumSuperSamples) / (float)_NumSuperSamples;
        float frameSize = (stepSize / (float)_NumSuperSamples);
        
        float totalDistance = lowerAtmosphereHit.exit;
        float cloudTestThreshold = 0.1;
        float cloudTest = 0.0;
        int zeroTest = 0;

        for(int n = 0, totalSteps = 0; n < _RayMarchSteps && totalSteps < 2000 && totalDistance < upperAtmosphereHit.exit && totalDistance < maxDist; n++, totalSteps++){
            float4 pos = 0;
            pos.xyz = ray.origin + ray.direction * totalDistance + ray.direction * (frameSegment * stepSize) + ray.direction * distanceOffset * (stepSize / (float)_NumSuperSamples);
            pos.w = remap_f(length(pos.xyz - ray.origin), 0.0, maxDist, 0.0, 6.0);
            if(cloudTest >= cloudTestThreshold){
                float dimensionalProfile = calculateDimensionalProfile(pos);

                if(dimensionalProfile > 0.001){
                    zeroTest = 0;
                    float density = calculateDensity(pos, dimensionalProfile);
                    if(density <= 0.001){
                        totalDistance += stepSize;
                        continue;
                    }

                    float extinction = (_AbsorptionCoefficient + _ScatteringCoefficient) * density;
                    float clampedExtinction = max(extinction, 0.0001);
                    float sampleAttenuation = exp(-extinction * stepSize);

                    if(_DebugLighting == 1){

                        float cosTheta = dot(normalize(ray.direction), normalize(_LightDir));
                        float3 ambientLight = _AmbientColor * _AmbientStrength * pow(1.0 - dimensionalProfile, 0.5);
                        float3 directLight = _LightColor * calculateLightEnergy(pos.xyz, cosTheta) * _LightIntensity;

                        // Improved Scattering Integration:
                        float3 luminance = directLight + ambientLight;
                        float3 integScatt = (luminance - luminance * sampleAttenuation) / clampedExtinction;
                        scattering += transparency * integScatt * _ScatteringCoefficient * density;
                        transparency *= sampleAttenuation;
                    }
                    else{
                        transparency *= sampleAttenuation;
                        scattering = float3(1,1,1);
                    }

                    if( depthSaved == 0){
                        float atmosphericDepth = 1.0 - dot(ray.direction, float3(0, 1, 0));
                        atmosphericDepth = totalDistance / (float)MAX_VIEW_DISTANCE * 2.0f;
                        float fogFactor = (_FogDensity / sqrt(log(2.0))) * max(0.0f, totalDistance - _FogOffset);
                        fogFactor = exp2(-fogFactor * fogFactor);
                        _CloudDepth[id.xy] = 1.0 - fogFactor;
                        depthSaved = 1;
                    }

                    if (transparency < 0.001){
                        break;
                    }
                }
                else{
                    zeroTest++;
                    if(zeroTest > 5){
                        cloudTest = 0.0;
                    }
                }

                totalDistance += stepSize;
            }
            else {
                cloudTest = calculateDimensionalProfile(pos);
                if(cloudTest < cloudTestThreshold){
                    totalDistance += stepSize * 1;
                }
                else {
                    totalDistance -= stepSize * 1;
                }
            }
        }

    }

    _CloudTex[id.xy] = float4(scattering, 1.0);
    _CloudMask[id.xy] = transparency;

}
